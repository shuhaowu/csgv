// Generated via coffeecrispt

window['require'] = window['module'] = window['namespace'] = function(name){
  var levels = name.split('.');
  var _module = window;
  for (var i=0; i<levels.length; i++){
    if (_module[levels[i]] === undefined)
      _module[levels[i]] = {};
    _module = _module[levels[i]];
  }
  return _module;
};


// Generated by CoffeeScript 1.4.0
(function() {
  var HtmlView, exports,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  exports = namespace("views.htmlview");

  HtmlView = (function(_super) {

    __extends(HtmlView, _super);

    function HtmlView() {
      return HtmlView.__super__.constructor.apply(this, arguments);
    }

    HtmlView.prototype.tagName = "div";

    HtmlView.prototype.render = function(page) {
      var that;
      statusmsg.display("Loading page...");
      that = this;
      $(this.el).load(("/static/jstemplates/" + page + ".html?") + Math.random(), function(response, textstatus, xhr) {
        statusmsg.close();
        if (textstatus === "error") {
          return that.el.innerHTML = "<h3 class=\"text-center\">" + xhr.status + " " + xhr.statusText + "</h3>";
        }
      });
      return this;
    };

    HtmlView.prototype["switch"] = HtmlView.prototype.render;

    return HtmlView;

  })(Backbone.View);

  exports["HtmlView"] = HtmlView;

}).call(this);


// Generated by CoffeeScript 1.4.0
(function() {
  var BetterArrowFormatter, BooleanUnknownFormatter, GradeCurveFormatter, PercentFormatter, exports;

  exports = namespace("utils");

  BetterArrowFormatter = (function() {

    function BetterArrowFormatter(options) {
      if (options == null) {
        options = {};
      }
      this.base = options.base || 0;
      this.uparrow = options.uparrow || "/static/img/uparrow.png";
      this.downarrow = options.downarrow || "/static/img/downarrow.png";
      this.flat = options.flat || "/static/img/flat.png";
    }

    BetterArrowFormatter.prototype.format = function(dt, column) {
      var arrow, html, i, v, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = dt.getNumberOfRows() - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        v = dt.getValue(i, column);
        if (v > this.base) {
          arrow = this.uparrow;
        } else if (v < this.base) {
          arrow = this.downarrow;
        } else {
          arrow = this.flat;
        }
        html = "<img src=\"" + arrow + "\" />";
        _results.push(dt.setFormattedValue(i, column, html));
      }
      return _results;
    };

    return BetterArrowFormatter;

  })();

  BooleanUnknownFormatter = (function() {

    function BooleanUnknownFormatter(options) {
      if (options == null) {
        options = {};
      }
      this.yes = options.yes || "&#x2713;";
      this.no = options.no || "&#x2717;";
      this.unknown = options.unknown || "Unknown";
    }

    BooleanUnknownFormatter.prototype.format = function(dt, column) {
      var fv, i, v, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = dt.getNumberOfRows() - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        v = dt.getValue(i, column);
        if (v === true) {
          fv = this.yes;
        } else if (v === false) {
          fv = this.no;
        } else if (v === null || v === void 0) {
          fv = this.unknown;
        } else {
          throw "Error: BooleanUnknown can only be true, false, null, or undefined!";
        }
        _results.push(dt.setFormattedValue(i, column, fv));
      }
      return _results;
    };

    return BooleanUnknownFormatter;

  })();

  PercentFormatter = (function() {

    function PercentFormatter(options) {
      if (options == null) {
        options = {};
      }
      this.precision = options.precision || 3;
    }

    PercentFormatter.prototype.format = function(dt, column) {
      var i, v, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = dt.getNumberOfRows() - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        v = dt.getValue(i, column);
        if (v || v === 0) {
          v *= 100;
          v = v.toPrecision(this.precision);
          _results.push(dt.setFormattedValue(i, column, "" + v + "%"));
        } else {
          _results.push(dt.setFormattedValue(i, column, "N/A"));
        }
      }
      return _results;
    };

    return PercentFormatter;

  })();

  GradeCurveFormatter = (function() {

    function GradeCurveFormatter() {}

    GradeCurveFormatter.prototype.mapper = ["Error", "F", "D-", "D", "D+", "C-", "C", "C+", "B-", "B", "B+", "A-", "A", "A+"];

    GradeCurveFormatter.prototype.format = function(dt, column) {
      var i, v, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = dt.getNumberOfRows() - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        v = dt.getValue(i, column);
        _results.push(dt.setFormattedValue(i, column, this.mapper[v]));
      }
      return _results;
    };

    return GradeCurveFormatter;

  })();

  exports["BetterArrowFormatter"] = BetterArrowFormatter;

  exports["BooleanUnknownFormatter"] = BooleanUnknownFormatter;

  exports["PercentFormatter"] = PercentFormatter;

  exports["GradeCurveFormatter"] = GradeCurveFormatter;

}).call(this);


// Generated by CoffeeScript 1.4.0
(function() {
  var exports, fetch_template;

  exports = namespace("views.utils");

  fetch_template = function(template_name, callback) {
    return $.get("/static/jstemplates/" + template_name, function(data) {
      var template;
      template = Handlebars.compile(data);
      return callback(template, data);
    });
  };

  exports["fetch_template"] = fetch_template;

}).call(this);


// Generated by CoffeeScript 1.4.0
(function() {
  var BoringView, exports, utils,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  exports = namespace("views.boringview");

  utils = require("views.utils");

  BoringView = (function(_super) {

    __extends(BoringView, _super);

    function BoringView() {
      return BoringView.__super__.constructor.apply(this, arguments);
    }

    BoringView.prototype.load_template = function() {
      var request, template_deferred;
      if (!this.__template_fetch_inprogress) {
        this.__template_fetch_inprogress = true;
        template_deferred = $.Deferred();
        request = $.get("/static/jstemplates/" + this.template_name);
        request.done(_.bind((function(data) {
          var template;
          template = Handlebars.compile(data);
          this.template = template;
          this.rawtemplate = data;
          if (this.on_template_loaded) {
            this.on_template_loaded();
          }
          return template_deferred.resolve(template, data);
        }), this));
        request.fail(function(jqxhr) {
          return template_deferred.reject(jqxhr);
        });
        return this.template_request = template_deferred.promise();
      }
    };

    return BoringView;

  })(Backbone.View);

  exports["BoringView"] = BoringView;

}).call(this);


// Generated by CoffeeScript 1.4.0
(function() {
  var DetailsView, arrow, exports, levelsmap, overall_vaxis_label, overallmodemap, overallsubtitlemap, racemap, years,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  exports = namespace("views.detailsview");

  require("views.boringview");

  require("utils");

  racemap = {
    latino: "Hispanic/Latino",
    hawaii: "Hawaiian/Pacific Islander",
    indian: "American Indian/Alaskan Native",
    black: "African American",
    asian: "Asian",
    mixed: "2 or more",
    white: "White"
  };

  overallmodemap = {
    rank: "Ranks",
    grades: "School Grades",
    achievements: ["Overall", "Reading", "Math", "Writing", "Science"],
    growth: ["Overall", "Reading", "Math", "Writing"]
  };

  overall_vaxis_label = {
    rank: "Ranks",
    grades: "School Grades (1-13 is F to A+)",
    achievements: "Academic Achievement Grades (1-13 is F to A+)",
    growth: "Academic Growth Grades (1-13 is F to A+)"
  };

  overallsubtitlemap = {
    rank: "Lower is better",
    grades: "Higher is better, max 13",
    achievements: "Higher is better, max 13",
    growth: "Higher is better, max 13, science data missing"
  };

  levelsmap = {
    H: "As high school",
    M: "As middle school",
    E: "As elementary school"
  };

  arrow = {
    "up": 1,
    "flat": 0,
    "down": -1
  };

  years = ["2010", "2011", "2012"];

  DetailsView = (function(_super) {

    __extends(DetailsView, _super);

    function DetailsView() {
      return DetailsView.__super__.constructor.apply(this, arguments);
    }

    DetailsView.prototype.tagName = "div";

    DetailsView.prototype.template_name = "detailsview.html";

    DetailsView.prototype.events = {
      "click a.enrollment-switch": "switch_enrollment",
      "click a.overall-switch": "switch_overall",
      "mouseover #details-level-control a.btn": "level_control_hover",
      "click #details-level-control a.btn": "level_control_clicked",
      "click .similar-school-switcher": "on_similar_school_swicher_clicked"
    };

    DetailsView.prototype.initialize = function() {
      DetailsView.__super__.initialize.call(this);
      this.app = this.options.app;
      this.overall_chart = null;
      return this.enrollment_chart = null;
    };

    DetailsView.prototype.on_similar_school_swicher_clicked = function(e) {
      e.preventDefault();
      this.modal.modal("hide");
      if (this.options.mapview) {
        return this.options.mapview.search($(e.target).attr("data-id"));
      } else if (this.options.tabularview) {
        return this.options.tabularview.search($(e.target).attr("data-id"));
      }
    };

    DetailsView.prototype.level_control_hover = function(e) {
      return $(e.target).tooltip({
        title: "Schools have multiple levels. This is to view different levels.",
        placement: "bottom"
      });
    };

    DetailsView.prototype.fit_modal_body = function() {
      var body, bodypaddings, header, headerheight, height, modalheight;
      if (this.showing && this.modal) {
        header = $(".modal-header", this.modal);
        body = $(".modal-body", this.modal);
        modalheight = parseInt(this.modal.css("height"));
        headerheight = parseInt(header.css("height")) + parseInt(header.css("padding-top")) + parseInt(header.css("padding-bottom"));
        bodypaddings = parseInt(body.css("padding-top")) + parseInt(body.css("padding-bottom"));
        height = modalheight - headerheight - bodypaddings - 5;
        return body.css("max-height", "" + height + "px");
      }
    };

    DetailsView.prototype.show = function(id, modal) {
      var that;
      that = this;
      statusmsg.display("Loading school details...");
      return this.template_request.done(function() {
        var request;
        request = $.getJSON("/schools/details/" + id, function(data) {
          var d, i, l, level, row, rows, whatever, year_data, _i, _j, _k, _l, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3, _ref4, _temp;
          data.meta.name = data.meta.name.toLowerCase();
          that.data = data;
          that["id"] = id;
          _ref = that.data;
          for (level in _ref) {
            d = _ref[level];
            if (level === "meta") {
              continue;
            }
            rows = [];
            _ref1 = d["achievements"];
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              year_data = _ref1[_i];
              if (!year_data) {
                year_data = {};
              }
              row = [year_data["overall"], year_data["read"], year_data["math"], year_data["write"], year_data["science"]];
              rows.push(row);
            }
            d["achievements"] = rows;
            rows = [];
            _ref2 = d["growth"];
            for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
              year_data = _ref2[_j];
              if (!year_data) {
                year_data = {};
              }
              row = [year_data["overall"], year_data["read"], year_data["math"], year_data["write"]];
              rows.push(row);
            }
            d["growth"] = rows;
            rows = [];
            _ref3 = d["coact"];
            for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
              year_data = _ref3[_k];
              if (!year_data) {
                year_data = {};
              }
              row = [year_data["read"], year_data["math"], year_data["write"], year_data["science"]];
              rows.push(row);
            }
            d["coact"] = rows;
            rows = [];
            for (i = _l = 0; _l <= 2; i = ++_l) {
              row = [arrow[d["achievementchange"][i]], arrow[d["growthchange"][i]], arrow[d["scorechange"][i]]];
              rows.push(row);
            }
            d["change"] = rows;
          }
          l = [];
          _ref4 = that.data;
          for (level in _ref4) {
            whatever = _ref4[level];
            if (level === "meta") {
              continue;
            }
            l.push({
              code: level,
              title: levelsmap[level]
            });
          }
          that.data["meta"]["level"] = l;
          that.render();
          modal.append(that.el);
          modal.modal("show");
          modal.on("shown", function() {
            that.fit_modal_body();
            return modal.off("shown");
          });
          that.showing = true;
          that.modal = modal;
          modal.on("hide", _.bind(that.close, that));
          _temp = id.split("-");
          if (_temp.length > 1) {
            that.change_level(_temp[1]);
          } else {
            that.change_level(l[l.length - 1].code);
          }
          that.delegateEvents();
          $(window).resize(function(e) {
            return that.fit_modal_body();
          });
          return statusmsg.close();
        });
        return request.fail(function(jqxhr, textstatus) {
          statusmsg.close();
          return statusmsg.display("Error loading school details: " + jqxhr.status + " " + textstatus, true);
        });
      });
    };

    DetailsView.prototype.draw_charts = function(last) {
      if (last == null) {
        last = false;
      }
      this.draw_enrollment_chart(last ? this.current_enrollment_year : "2012");
      this.draw_overall_chart(last ? this.current_overall_mode : "rank");
      this.draw_change_table();
      this.get_similar_schools();
      if (this.data["H"] && this.data["H"].coact && this.currentlevel === "H") {
        this.draw_coact_table();
        return $(".interchangeable-panel", this.el).show();
      } else {
        return $(".interchangeable-panel", this.el).hide();
      }
    };

    DetailsView.prototype.level_control_clicked = function(e) {
      e.preventDefault();
      return this.change_level($(e.target).attr("data-level"));
    };

    DetailsView.prototype.change_level = function(level) {
      this.currentlevel = level;
      $("#details-level-control a.btn", this.el).each(function(i, btn) {
        if ($(btn).removeClass("active").attr("data-level") === level) {
          return $(btn).addClass("active");
        }
      });
      return this.draw_charts(true);
    };

    DetailsView.prototype.switch_enrollment = function(event) {
      event.preventDefault();
      return this.draw_enrollment_chart($(event.target).attr("data-year"));
    };

    DetailsView.prototype.switch_overall = function(event) {
      event.preventDefault();
      return this.draw_overall_chart($(event.target).attr("data-type"));
    };

    DetailsView.prototype.draw_overall_chart = function(mode) {
      var c, d, data, formatter, i, options, title, _i, _j, _ref;
      if (mode == null) {
        mode = "rank";
      }
      data = [];
      if ($.type(overallmodemap[mode]) !== "array") {
        c = [overallmodemap[mode]];
      } else {
        c = overallmodemap[mode];
      }
      data = [["Year"].concat(c)];
      d = this.data[this.currentlevel];
      for (i = _i = 0; _i <= 2; i = ++_i) {
        if ($.type(d[mode][i]) !== "array") {
          c = [d[mode][i]];
        } else {
          c = d[mode][i];
        }
        data.push([years[i]].concat(c));
      }
      data = google.visualization.arrayToDataTable(data);
      if (mode !== "rank") {
        formatter = new utils.GradeCurveFormatter();
        for (i = _j = 1, _ref = data.getNumberOfColumns() - 1; 1 <= _ref ? _j <= _ref : _j >= _ref; i = 1 <= _ref ? ++_j : --_j) {
          formatter.format(data, i);
        }
      }
      title = c.length === 1 ? overallmodemap[mode].toLowerCase() : overallmodemap[mode].join(", ").toLowerCase();
      options = {
        title: "3 year " + title + " (" + overallsubtitlemap[mode] + ")",
        width: 500,
        height: 300,
        chartArea: {
          width: "80%",
          height: "75%"
        },
        titleTextStyle: {
          fontSize: 15
        },
        legend: {
          position: c.length === 1 ? "none" : "bottom"
        },
        hAxis: {
          title: "Year"
        },
        vAxis: {
          title: overall_vaxis_label[mode]
        },
        interpolateNulls: true,
        pointSize: 8
      };
      this.overall_chart = new google.visualization.LineChart(document.getElementById("overall-chart"));
      this.overall_chart.draw(data, options);
      this.switch_chart_control($("a.overall-switch", this.el), "data-type", mode);
      return this.current_overall_mode = mode;
    };

    DetailsView.prototype.draw_enrollment_chart = function(year) {
      var data, number, options, race, _ref;
      if (year == null) {
        year = "2012";
      }
      data = [["Race", "Numbers"]];
      _ref = this.data["meta"]["enrollment"][year];
      for (race in _ref) {
        number = _ref[race];
        if (race === "total") {
          continue;
        } else {
          if (number > 0) {
            data.push([racemap[race], number]);
          }
        }
      }
      data = google.visualization.arrayToDataTable(data);
      options = {
        title: "" + year + " enrollment statistics",
        width: 500,
        height: 300,
        chartArea: {
          width: "100%",
          height: "80%"
        },
        legend: {
          position: "right"
        },
        titleTextStyle: {
          fontSize: 16
        }
      };
      this.enrollment_chart = new google.visualization.PieChart(document.getElementById("enrollment-chart"));
      this.enrollment_chart.draw(data, options);
      this.switch_chart_control($("a.enrollment-switch"), "data-year", year);
      return this.current_enrollment_year = year;
    };

    DetailsView.prototype.switch_chart_control = function(controls, attribute, current) {
      return controls.each(function(i, s) {
        if ($(s).removeClass("active").attr(attribute) === current) {
          return $(s).addClass("active");
        }
      });
    };

    DetailsView.prototype.draw_change_table = function() {
      var arrowformatter, change, data, i, rows, _i, _len, _ref;
      data = new google.visualization.DataTable();
      data.addColumn("string", "Year");
      data.addColumn("number", "Achievement Change");
      data.addColumn("number", "Growth Change");
      data.addColumn("number", "Score Change");
      rows = [];
      _ref = this.data[this.currentlevel].change;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        change = _ref[i];
        rows.push([years[i]].concat(change));
      }
      data.addRows(rows);
      data.sort({
        column: 0,
        desc: true
      });
      arrowformatter = new utils.BetterArrowFormatter();
      arrowformatter.format(data, 1);
      arrowformatter.format(data, 2);
      arrowformatter.format(data, 3);
      this.change_table = new google.visualization.Table(document.getElementById("change-table"));
      return this.change_table.draw(data, {
        allowHtml: true
      });
    };

    DetailsView.prototype.draw_coact_table = function() {
      var booleanformatter, coact, data, i, rows, _i, _len, _ref;
      $(".interchangeable-panel h4").text("COACT");
      $(".interchangeable-panel p small").text("These stats shows if the average student in the school have a 75% chance of earning a C or above in a corresponding college course.");
      data = new google.visualization.DataTable();
      data.addColumn("string", "Year");
      data.addColumn("boolean", "Reading");
      data.addColumn("boolean", "Math");
      data.addColumn("boolean", "Writing");
      data.addColumn("boolean", "Science");
      rows = [];
      _ref = this.data.H.coact;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        coact = _ref[i];
        rows.push([years[i]].concat(coact));
      }
      data.addRows(rows);
      data.sort({
        column: 0,
        desc: true
      });
      booleanformatter = new utils.BooleanUnknownFormatter();
      booleanformatter.format(data, 1);
      booleanformatter.format(data, 2);
      booleanformatter.format(data, 3);
      booleanformatter.format(data, 4);
      this.coact_table = new google.visualization.Table(document.getElementById("coact-table"));
      return this.coact_table.draw(data);
    };

    DetailsView.prototype.get_similar_schools = function() {
      var results, that;
      results = $.getJSON("/similar/" + this.id + "/" + this.currentlevel + "/grades");
      that = this;
      results.done(function(data) {
        var dt, gradeformatter, html, i, rows, table, v, _i, _j, _len, _ref, _ref1;
        if (data.schools.length === 0) {
          return $("#grades-similar", that.el).html("No similar schools found.");
        } else {
          dt = new google.visualization.DataTable();
          dt.addColumn("string", "Name");
          dt.addColumn("number", "Rank");
          dt.addColumn("number", "Grade");
          dt.addColumn("number", "Overall");
          dt.addColumn("number", "Reading");
          dt.addColumn("number", "Math");
          dt.addColumn("number", "Writing");
          dt.addColumn("number", "Science");
          rows = [];
          _ref = data.schools;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            v = _ref[_i];
            rows.push(v.data.slice(0, 8));
          }
          dt.addRows(rows);
          if (that.options.parent_can_search) {
            for (i = _j = 0, _ref1 = dt.getNumberOfRows() - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
              v = dt.getValue(i, 0);
              html = "<a href=\"#\" class=\"similar-school-switcher\" data-id=\"" + data.schools[i].id + "\">" + v + "</a>";
              dt.setFormattedValue(i, 0, html);
            }
          }
          gradeformatter = new utils.GradeCurveFormatter();
          gradeformatter.format(dt, 2);
          gradeformatter.format(dt, 3);
          gradeformatter.format(dt, 4);
          gradeformatter.format(dt, 5);
          gradeformatter.format(dt, 6);
          gradeformatter.format(dt, 7);
          table = new google.visualization.Table($("#grades-similar", that.el)[0]);
          table.draw(dt, {
            allowHtml: true
          });
          return that.delegateEvents();
        }
      });
      results.fail(function(xhr) {
        return $("#grades-similar", that.el).html("<h5 class=\"text-center\">Error: " + xhr.status + "</h5>");
      });
      results = $.getJSON("/similar/" + this.id + "/" + this.currentlevel + "/enrollment");
      results.done(function(data) {
        var dt, html, i, percentformatter, rows, table, v, _i, _j, _len, _ref, _ref1;
        if (data.schools.length === 0) {
          return $("#enrollment-similar", that.el).html("No similar schools found.");
        } else {
          dt = new google.visualization.DataTable();
          dt.addColumn("string", "Name");
          dt.addColumn("number", "Enrollment");
          dt.addColumn("number", "Asian");
          dt.addColumn("number", "Black");
          dt.addColumn("number", "Latino");
          dt.addColumn("number", "White");
          rows = [];
          _ref = data.schools;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            v = _ref[_i];
            v.data[1] = Math.round(5000 * v.data[1]);
            rows.push(v.data);
          }
          dt.addRows(rows);
          if (that.options.parent_can_search) {
            for (i = _j = 0, _ref1 = dt.getNumberOfRows() - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
              v = dt.getValue(i, 0);
              html = "<a href=\"#\" class=\"similar-school-switcher\" data-id=\"" + data.schools[i].id + "\">" + v + "</a>";
              dt.setFormattedValue(i, 0, html);
            }
          }
          percentformatter = new utils.PercentFormatter();
          percentformatter.format(dt, 2);
          percentformatter.format(dt, 3);
          percentformatter.format(dt, 4);
          percentformatter.format(dt, 5);
          table = new google.visualization.Table($("#enrollment-similar", that.el)[0]);
          table.draw(dt, {
            allowHtml: true
          });
          return that.delegateEvents();
        }
      });
      return results.fail(function(xhr) {
        return $("#enrollment-similar", that.el).html("<h5 class=\"text-center\">Error: " + xhr.status + "</h5>");
      });
    };

    DetailsView.prototype.render = function() {
      this.el.innerHTML = this.template(this.data.meta);
      return this;
    };

    DetailsView.prototype.close = function() {
      if (this.modal && this.showing) {
        this.showing = false;
        this.undelegateEvents();
        this.modal.off("hide");
        $(window).off("resize");
        if (this.options.mapview) {
          this.app.navigate("/map", {
            trigger: false
          });
        }
        this.current_enrollment_year = void 0;
        return this.current_overall_mode = void 0;
      }
    };

    return DetailsView;

  })(views.boringview.BoringView);

  exports["DetailsView"] = DetailsView;

}).call(this);


// Generated by CoffeeScript 1.4.0
(function() {
  var GRADIENT, exports, zoomlevel_enrollment,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  exports = namespace("views.mapview");

  require("views.boringview");

  require("views.detailsview");

  zoomlevel_enrollment = function(enrollment) {
    return Math.ceil(Math.log(3500.0 / enrollment - 1) + 9);
  };

  GRADIENT = ['rgba(0, 255, 255, 0)', 'rgba(0, 255, 255, 1)', 'rgba(0, 191, 255, 1)', 'rgba(0, 127, 255, 1)', 'rgba(0, 63, 255, 1)', 'rgba(0, 0, 255, 1)', 'rgba(0, 0, 223, 1)', 'rgba(0, 0, 191, 1)', 'rgba(0, 0, 159, 1)', 'rgba(0, 0, 127, 1)', 'rgba(63, 0, 91, 1)', 'rgba(127, 0, 63, 1)', 'rgba(191, 0, 31, 1)', 'rgba(255, 0, 0, 1)'];

  jQuery(function() {
    var MapView;
    MapView = (function(_super) {

      __extends(MapView, _super);

      function MapView() {
        return MapView.__super__.constructor.apply(this, arguments);
      }

      MapView.prototype.el = $("div#main");

      MapView.prototype.template_name = "mapview.html";

      MapView.prototype.initialize = function() {
        MapView.__super__.initialize.call(this);
        this.app = this.options.app;
        this.details_view = new views.detailsview.DetailsView({
          app: this.app,
          mapview: this,
          parent_can_search: true
        });
        this.details_view.load_template();
        return this.infowindow = null;
      };

      MapView.prototype.search_show_info_window = function(id) {
        var show_info_window;
        this._enrollment_search_tries = 0;
        show_info_window = _.bind((function() {
          console.log("waiting..");
          if (this._enrollment_search_tries > 600) {
            statusmsg.display("Something went wrong while trying to find school " + id, true);
            return;
          }
          this._enrollment_search_tries++;
          if (!this.all_markers[id] && !this.all_markers[id + "-E"] && !this.all_markers[id + "-M"] && !this.all_markers[id + "-H"]) {
            return setTimeout(show_info_window, 100);
          } else {
            console.log(this._enrollment_search_tries);
            this._enrollment_search_tries = 0;
            return this.show_info_window(id);
          }
        }), this);
        return show_info_window();
      };

      MapView.prototype.enrollment_search = function(id) {
        var coordinate, latlng, zoomlevel;
        statusmsg.display("Loading...");
        if (coordinate = window["SCHOOL_COORDINATES"][id]) {
          latlng = new google.maps.LatLng(coordinate[0], coordinate[1]);
          this.map.setCenter(latlng);
          zoomlevel = zoomlevel_enrollment(window["SCHOOL_ENROLLMENTS"][id]);
          this.map.setZoom(zoomlevel);
          return this.search_show_info_window(id);
        }
      };

      MapView.prototype.rank_search = function(id) {
        var coordinate, latlng, response, that;
        if (coordinate = window["SCHOOL_COORDINATES"][id]) {
          latlng = new google.maps.LatLng(coordinate[0], coordinate[1]);
          this.map.setCenter(latlng);
          response = $.get("/reverserank/" + id);
          that = this;
          response.done(function(data) {
            var zoomlevel;
            zoomlevel = Number(data);
            that.map.setZoom(zoomlevel);
            return that.search_show_info_window(id);
          });
          return response.fail(function(xhr) {
            if (xhr.status === 400) {
              return statusmsg.display("That school doesn't have a rank. You could search it in enrollment view", true);
            } else {
              return statusmsg.display("Something went wrong. This is a bug: " + xhr.status);
            }
          });
        }
      };

      MapView.prototype.search = function(id) {
        var _ref;
        if (this.currentmode === "enrollment-heat") {
          return this["switch"]("enrollment-default", _.bind((function() {
            return this.enrollment_search(id);
          }), this));
        } else if ((_ref = this.currentmode) === "enrollment-default" || _ref === "default") {
          return this.enrollment_search(id);
        } else if (this.currentmode === "rank-default") {
          return this.rank_search(id);
        } else {
          return statusmsg.display("Cannot search under this mode!", true);
        }
      };

      MapView.prototype.on_template_loaded = function() {
        var id, node, root, templates, _i, _len;
        if (!this.school_info_window_template) {
          root = document.createElement("div");
          root.innerHTML = this.rawtemplate;
          root.style.display = "none";
          templates = ["info_window_template"];
          document.body.appendChild(root);
          for (_i = 0, _len = templates.length; _i < _len; _i++) {
            id = templates[_i];
            node = document.getElementById(id);
            this[id] = Handlebars.compile(node.innerHTML);
            root.removeChild(node);
          }
          this.template = Handlebars.compile(root.innerHTML);
          return root.parentNode.removeChild(root);
        }
      };

      MapView.prototype.events = {
        "click #mapcontrols .mapnav": "on_mapnav_clicked"
      };

      MapView.prototype.initialize_map = function(mode, lat, lng, zoom) {
        var options;
        if (lat == null) {
          lat = 39.070379;
        }
        if (lng == null) {
          lng = -105.545654;
        }
        if (zoom == null) {
          zoom = 7;
        }
        options = {
          zoom: zoom,
          center: new google.maps.LatLng(lat, lng),
          mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        this.map = new google.maps.Map(document.getElementById("mapcanvas"), options);
        this.currentmode = "enrollment-default";
        this.last_bounds_change = 0;
        this.all_markers = {};
        this.marker_image_em = new google.maps.MarkerImage("/static/img/school.png", new google.maps.Size(32, 37), new google.maps.Point(0, 0), new google.maps.Point(16, 0));
        this.marker_image_high = new google.maps.MarkerImage("/static/img/highschool.png", new google.maps.Size(32, 37), new google.maps.Point(0, 0), new google.maps.Point(16, 0));
        return this["switch"](mode || "default");
      };

      MapView.prototype.show_info_window = function(schoolid, marker, statusbox) {
        if (marker == null) {
          marker = this.all_markers[schoolid] || this.all_markers[schoolid + "-E"] || this.all_markers[schoolid + "-M"] || this.all_markers[schoolid + "-H"];
        }
        if (statusbox == null) {
          statusbox = true;
        }
        if (statusbox) {
          statusmsg.display("Loading...");
        }
        return $.getJSON("/schools/info/" + schoolid, _.bind((function(data) {
          var level, onlinecharter;
          onlinecharter = "";
          if (data["online"] && data["charter"]) {
            onlinecharter = "Online & Charter";
          } else if (data["online"]) {
            onlinecharter = "Online";
          } else if (data["charter"]) {
            onlinecharter = "Charter";
          } else {
            onlinecharter = "Neither";
          }
          if (!data["level"]) {
            level = "Unknown";
          } else {
            if (data["level"]["elementary"]) {
              level = ", Elementary";
            }
            if (data["level"]["middle"]) {
              level = ", Intermediate";
            }
            if (data["level"]["high"]) {
              level = ", Secondary";
            }
            level = level.slice(2, level.length);
          }
          if (this.infowindow) {
            this.infowindow.close();
          }
          this.infowindow = new google.maps.InfoWindow({
            content: this.info_window_template({
              name: data["name"].toLowerCase(),
              address: (data["address"] + ", " + data["city"]).toLowerCase() + ", CO " + data["zipcode"],
              onlinecharter: onlinecharter,
              level: level,
              enrollment: data["enrollment"]["2012"]["total"],
              rank: data["rank"],
              id: schoolid,
              frl: Math.round(data["frl"][2] * 1000) / 10 + "%"
            })
          });
          this.infowindow.open(this.map, marker);
          return statusmsg.close();
        }), this));
      };

      MapView.prototype.redraw_schools = function(schools, marker_icon) {
        var all_markers, coordinate, data, icon, id, latlng, marker, that, totalnum;
        all_markers = {};
        $("#map-status").text("Redrawing...");
        totalnum = 0;
        for (id in schools) {
          data = schools[id];
          if (data["real_id"]) {
            coordinate = window["SCHOOL_COORDINATES"][data["real_id"]];
          } else {
            coordinate = window["SCHOOL_COORDINATES"][id];
          }
          latlng = new google.maps.LatLng(coordinate[0], coordinate[1]);
          icon = typeof marker_icon === "function" ? marker_icon(data) : marker_icon;
          if (id in this.all_markers) {
            marker = this.all_markers[id];
            delete this.all_markers[id];
          } else {
            marker = new google.maps.Marker({
              position: latlng,
              map: this.map,
              icon: icon
            });
            that = this;
            (function(schoolid, marker) {
              return google.maps.event.addListener(marker, "click", function() {
                return that.show_info_window(schoolid, marker);
              });
            })(id, marker);
          }
          all_markers[id] = marker;
          totalnum++;
        }
        this.marker_cleanup();
        this.all_markers = all_markers;
        return $("#map-status").text(totalnum);
      };

      MapView.prototype.marker_cleanup = function() {
        var id, marker, _ref;
        _ref = this.all_markers;
        for (id in _ref) {
          marker = _ref[id];
          marker.setMap(null);
          google.maps.event.clearListeners(marker, "click");
        }
        return this.all_markers = {};
      };

      MapView.prototype.heat_cleanup = function() {
        if (this.heatmap) {
          this.heatmap.setMap(null);
          return this.heatmap = null;
        }
      };

      MapView.prototype.on_mapnav_clicked = function(event) {
        var mapmode;
        mapmode = event.target.id.slice(0, event.target.id.length - 4) + "default";
        return this.app.navigate("map/" + mapmode, {
          trigger: true
        });
      };

      MapView.prototype.get_viewport_schools_and_draw = function(remote_url, marker_icon) {
        var bottomleft, boundary, that, topright;
        boundary = this.map.getBounds();
        topright = boundary.getNorthEast();
        bottomleft = boundary.getSouthWest();
        that = this;
        return $.getJSON(remote_url, {
          toprightlat: topright.lat(),
          toprightlong: topright.lng(),
          bottomleftlat: bottomleft.lat(),
          bottomleftlong: bottomleft.lng(),
          zoomlevel: this.map.getZoom()
        }, function(data) {
          return that.redraw_schools(data, marker_icon);
        });
      };

      MapView.prototype["switch"] = function(mode, callback) {
        var coordinate, data, id, marker_icon, redraw, response, that, _ref;
        if (callback == null) {
          callback = null;
        }
        this.currentmode = mode;
        if (!this.map.getBounds()) {
          that = this;
          setTimeout((function() {
            return that["switch"](mode);
          }), 100);
          return;
        }
        if (this.cleanup) {
          this.cleanup();
        }
        switch (mode) {
          case "enrollment-heat":
            redraw = null;
            data = new google.maps.MVCArray();
            _ref = window.SCHOOL_COORDINATES;
            for (id in _ref) {
              coordinate = _ref[id];
              data.push({
                location: new google.maps.LatLng(coordinate[0], coordinate[1]),
                weight: window.SCHOOL_ENROLLMENTS[id],
                dissipating: true
              });
            }
            this.heatmap = new google.maps.visualization.HeatmapLayer({
              map: this.map,
              data: data,
              gradient: GRADIENT
            });
            this.cleanup = this.heat_cleanup;
            this.switch_button("enrollment", "Heat");
            break;
          case "rank-default":
            marker_icon = function(data) {
              var circle, color;
              if (data["level"] === "M") {
                color = "red";
              } else {
                color = "blue";
              }
              circle = {
                path: google.maps.SymbolPath.CIRCLE,
                scale: data["scale"],
                fillColor: color,
                strokeWeight: 0.5,
                fillOpacity: 0.2
              };
              return circle;
            };
            redraw = _.bind((function() {
              return this.get_viewport_schools_and_draw("/rankview", marker_icon);
            }), this);
            redraw();
            this.cleanup = this.marker_cleanup;
            this.switch_button("rank", "Rank");
            $("#map-status").text("Heat");
            break;
          case "rank-heat":
            statusmsg.display("Loading...");
            response = $.getJSON("/rankheat");
            response.done(_.bind((function(data) {
              var d, heatdata, _i, _len, _ref1;
              heatdata = new google.maps.MVCArray();
              _ref1 = data.data;
              for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                d = _ref1[_i];
                heatdata.push({
                  location: new google.maps.LatLng(window.SCHOOL_COORDINATES[d["id"]][0], window.SCHOOL_COORDINATES[d["id"]][1]),
                  weight: d["weight"],
                  radius: d["weight"]
                });
              }
              this.heatmap = new google.maps.visualization.HeatmapLayer({
                map: this.map,
                data: heatdata,
                gradient: GRADIENT
              });
              this.cleanup = this.heat_cleanup;
              this.switch_button("rank", "Heat");
              return statusmsg.close();
            }), this));
            response.fail(function(xhr) {
              return statusmsg.display("Failed to get rank heat map " + xhr.status, true);
            });
            break;
          case "improved-default":
            statusmsg.display("Loading...");
            response = $.getJSON("/improvedheat");
            response.done(_.bind((function(data) {
              var d, heatdata, _i, _len, _ref1;
              heatdata = new google.maps.MVCArray();
              _ref1 = data.data;
              for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                d = _ref1[_i];
                heatdata.push({
                  location: new google.maps.LatLng(window.SCHOOL_COORDINATES[d["id"]][0], window.SCHOOL_COORDINATES[d["id"]][1]),
                  weight: d["weight"],
                  radius: d["weight"]
                });
              }
              this.heatmap = new google.maps.visualization.HeatmapLayer({
                map: this.map,
                data: heatdata,
                gradient: GRADIENT
              });
              this.cleanup = this.heat_cleanup;
              this.switch_button("improved", "Heat");
              return statusmsg.close();
            }), this));
            response.fail(function(xhr) {
              return statusmsg.display("Failed to get rank heat map " + xhr.status, true);
            });
            break;
          default:
            marker_icon = _.bind((function(level) {
              if (level === "M") {
                return this.marker_image_em;
              } else {
                return this.marker_image_high;
              }
            }), this);
            redraw = _.bind((function() {
              return this.get_viewport_schools_and_draw("/schoolmarkers", marker_icon);
            }), this);
            redraw();
            this.cleanup = this.marker_cleanup;
            this.switch_button("enrollment", "Default");
        }
        google.maps.event.clearListeners(this.map, "idle");
        if (redraw) {
          google.maps.event.addListener(this.map, "idle", redraw);
        }
        if (callback) {
          return callback();
        }
      };

      MapView.prototype.switch_button = function(type, mode) {
        var button, buttons, _i, _len, _results;
        buttons = $("#mapcontrols .mapnav");
        _results = [];
        for (_i = 0, _len = buttons.length; _i < _len; _i++) {
          button = buttons[_i];
          if (button.id.slice(0, type.length) !== type) {
            if ($(button).hasClass("active")) {
              _results.push($(button).removeClass("active"));
            } else {
              _results.push(void 0);
            }
          } else {
            $(button).addClass("active");
            _results.push($(button).children("span").text(mode));
          }
        }
        return _results;
      };

      MapView.prototype.show_details = function(id) {
        var coordinate, latlng;
        id = id.split("-")[0];
        if (coordinate = window.SCHOOL_COORDINATES[id]) {
          latlng = new google.maps.LatLng(coordinate[0], coordinate[1]);
          this.map.setCenter(latlng);
          return this.details_view.show(id, $("#details-view", this.el));
        } else {
          return statusmsg.display("Invalid school id '" + id + "'", true);
        }
      };

      MapView.prototype.on_view_changed = function() {
        return this.undelegateEvents();
      };

      MapView.prototype.render = function() {
        this.$el.html(this.template());
        this.delegateEvents();
        return this;
      };

      return MapView;

    })(views.boringview.BoringView);
    return exports["MapView"] = MapView;
  });

}).call(this);


// Generated by CoffeeScript 1.4.0
(function() {
  var ChartView, FRLRawScatterPanel, MeanRanksPanel, MostImprovedTablePanel, OnlineCharterTablePanel, RanksHistogramPanel, charter_online_readable_map, exports,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  exports = namespace("views.chartview");

  require("views.boringview");

  charter_online_readable_map = {
    H: {
      both: "Charter and online high schools",
      charter: "Charter high schools",
      online: "Online high schools",
      neither: "Traditional high schools",
      everything: "All high schools"
    },
    M: {
      both: "Charter and online elementary/middle schools",
      charter: "Charter elementary/middle schools",
      online: "Online elementary/middle schools",
      neither: "Traditional elementary/middle schools",
      everything: "All elementary/middle schools"
    }
  };

  MeanRanksPanel = (function() {

    function MeanRanksPanel(data, panel) {
      var current_row, level, maxrank, meanrank, rows, type, year, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      this.panel = panel;
      this.data = data;
      rows = [];
      _ref = ["2010", "2011", "2012"];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        year = _ref[_i];
        current_row = [year];
        rows.push(current_row);
        _ref1 = ["H", "M"];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          level = _ref1[_j];
          _ref2 = ["charter", "online", "both", "neither"];
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            type = _ref2[_k];
            meanrank = data["mean_rank"][level][type][year];
            maxrank = data["maxranks"][level][type][year];
            if (meanrank !== null && maxrank !== null) {
              current_row.push(Math.round((maxrank + 1 - meanrank) / maxrank * 1000) / 10);
            } else {
              current_row.push(null);
            }
          }
        }
      }
      this.datatable = new google.visualization.DataTable();
      this.datatable.addColumn("string", "Year");
      this.datatable.addColumn("number", "Charter High Schools");
      this.datatable.addColumn("number", "Online High Schools");
      this.datatable.addColumn("number", "Charter & Online High Schools");
      this.datatable.addColumn("number", "Tradition High Schools");
      this.datatable.addColumn("number", "Charter Middle/Elementary Schools");
      this.datatable.addColumn("number", "Online Middle/Elementary Schools");
      this.datatable.addColumn("number", "Charter & Online Middle/Elementary Schools");
      this.datatable.addColumn("number", "Tradition Middle/Elementary Schools");
      this.datatable.addRows(rows);
      this.chart = new google.visualization.LineChart(this.panel[0]);
      this.panel.empty();
      this.redraw();
      this.resize_event_callback = _.bind(this.redraw, this);
      $(window).on("resize", this.resize_event_callback);
    }

    MeanRanksPanel.prototype.unhook_events = function() {
      return $(window).off("resize", this.resize_event_callback);
    };

    MeanRanksPanel.prototype.redraw = function() {
      var options;
      options = {
        title: "Online, charter, traditional schools vs their mean ranks",
        width: parseInt(this.panel.css("width")),
        height: 300,
        chartArea: {
          width: "60%",
          height: "80%"
        },
        titleTextStyle: {
          fontSize: 15
        },
        legend: {
          position: "right"
        },
        hAxis: {
          title: "Year"
        },
        vAxis: {
          title: "Mean Ranks"
        },
        interpolateNulls: true,
        pointSize: 8
      };
      return this.chart.draw(this.datatable, options);
    };

    return MeanRanksPanel;

  })();

  RanksHistogramPanel = (function() {

    function RanksHistogramPanel(data, panel) {
      var that;
      this.data = data;
      this.panel = panel;
      this.currentyear = "2012";
      this.currentlevel = "H";
      this.currenttype = "everything";
      this.lastyear = null;
      this.lastlevel = null;
      this.lasttype = null;
      this.datatable = new google.visualization.DataTable();
      this.datatable.addColumn("string", "Range");
      this.datatable.addColumn("number", "Count");
      this.panel.empty();
      this.controlarea = $(document.createElement("div"));
      this.panel.append(this.controlarea);
      this.chartarea = $(document.createElement("div"));
      this.panel.append(this.chartarea);
      this.chart = new google.visualization.ColumnChart(this.chartarea[0]);
      that = this;
      this.controlarea.load("/static/chartview/onlinecharterhistogram.html?" + Math.random(), function() {
        $("a.dropdown-toggle", that.controlarea).dropdown();
        return $("a.online-charter-histogram-switch", that.controlarea).on("click", function(e) {
          var d;
          e.preventDefault();
          d = $(this).attr("data-data");
          that["current" + $(this).attr("data-what")] = d;
          $("a.online-charter-histogram-switch", $(this).parent().parent()).each(function(i, a) {
            $(a).parent().removeClass("active");
            if ($(a).attr("data-data") === d) {
              return $(a).parent().addClass("active");
            }
          });
          return that.redraw();
        });
      });
      this.redraw();
      this.navbar_buttons = [];
      $(document.createElement("a")).addClass("btn");
      this.resize_event_callback = _.bind(this.redraw, this);
      $(window).on("resize", this.resize_event_callback);
    }

    RanksHistogramPanel.prototype.unhook_events = function() {
      $(window).off("resize", this.resize_event_callback);
      return $("a.online-charter-histogram-switch", this.controlarea).off("click");
    };

    RanksHistogramPanel.prototype.redraw = function() {
      var bin_label, bins, histogram, i, options, rows, v, _i, _len;
      if (this.currentyear !== this.lastyear || this.currentlevel !== this.lastlevel || this.currenttype !== this.lasttype) {
        this.lastyear = this.currentyear;
        this.lastlevel = this.currentlevel;
        this.lasttype = this.currenttype;
        rows = [];
        histogram = this.data["histogram"][this.currentlevel][this.currenttype][this.currentyear][0];
        bins = this.data["histogram"][this.currentlevel][this.currenttype][this.currentyear][1];
        for (i = _i = 0, _len = histogram.length; _i < _len; i = ++_i) {
          v = histogram[i];
          if (i < histogram.length - 1) {
            bin_label = Math.round(bins[i]) + "-" + Math.round(bins[i + 1]);
          } else {
            bin_label = Math.round(bins[i]) + "+";
          }
          rows.push([bin_label, v]);
        }
        this.datatable.removeRows(0, this.datatable.getNumberOfRows());
        this.datatable.addRows(rows);
        options = {
          title: "" + charter_online_readable_map[this.currentlevel][this.currenttype] + " rank histogram",
          width: parseInt(this.panel.css("width")),
          height: 300,
          chartArea: {
            width: "80%",
            height: "80%"
          },
          bar: {
            groupWidth: "100%"
          },
          titleTextStyle: {
            fontSize: 15
          },
          legend: {
            position: "none"
          },
          hAxis: {
            title: "Ranks"
          },
          vAxis: {
            title: "Count"
          }
        };
        return this.chart.draw(this.datatable, options);
      }
    };

    return RanksHistogramPanel;

  })();

  OnlineCharterTablePanel = (function() {

    function OnlineCharterTablePanel(data, panel) {
      var em_amountdiv, emarow, emrrow, emschool_meanranksdiv, harow, heading1, heading2, heading3, heading4, highschool_amountdiv, highschool_meanranksdiv, hrrow, level, options, year, _i, _j, _len, _len1, _ref, _ref1;
      this.data = data;
      this.panel = panel;
      heading1 = $(document.createElement("h4")).text("Mean Ranks (High Schools)");
      highschool_meanranksdiv = $(document.createElement("div"));
      heading2 = $(document.createElement("h4")).text("Mean Ranks (Elementary/Middle Schools)");
      emschool_meanranksdiv = $(document.createElement("div"));
      heading3 = $(document.createElement("h4")).text("Number of high schools in each category");
      highschool_amountdiv = $(document.createElement("div"));
      heading4 = $(document.createElement("h4")).text("Number of elementary/middle schools in each category");
      em_amountdiv = $(document.createElement("div"));
      this.panel.empty();
      this.panel.append(heading1).append(highschool_meanranksdiv).append(heading2).append(emschool_meanranksdiv).append(heading3).append(highschool_amountdiv).append(heading4).append(em_amountdiv);
      this.highschool_ranks_datatable = new google.visualization.DataTable();
      this.highschool_ranks_datatable.addColumn("string", "Year");
      this.highschool_ranks_datatable.addColumn("number", "Charter");
      this.highschool_ranks_datatable.addColumn("number", "Online");
      this.highschool_ranks_datatable.addColumn("number", "Charter and Online");
      this.highschool_ranks_datatable.addColumn("number", "Traditional");
      this.highschool_ranks_datatable.addColumn("number", "All");
      this.emschool_ranks_datatable = new google.visualization.DataTable();
      this.emschool_ranks_datatable.addColumn("string", "Year");
      this.emschool_ranks_datatable.addColumn("number", "Charter");
      this.emschool_ranks_datatable.addColumn("number", "Online");
      this.emschool_ranks_datatable.addColumn("number", "Charter and Online");
      this.emschool_ranks_datatable.addColumn("number", "Traditional");
      this.emschool_ranks_datatable.addColumn("number", "All");
      this.highschool_amount_datatable = new google.visualization.DataTable();
      this.highschool_amount_datatable.addColumn("string", "Year");
      this.highschool_amount_datatable.addColumn("number", "Charter");
      this.highschool_amount_datatable.addColumn("number", "Online");
      this.highschool_amount_datatable.addColumn("number", "Charter and Online");
      this.highschool_amount_datatable.addColumn("number", "Traditional");
      this.highschool_amount_datatable.addColumn("number", "All");
      this.emschool_amount_datatable = new google.visualization.DataTable();
      this.emschool_amount_datatable.addColumn("string", "Year");
      this.emschool_amount_datatable.addColumn("number", "Charter");
      this.emschool_amount_datatable.addColumn("number", "Online");
      this.emschool_amount_datatable.addColumn("number", "Charter and Online");
      this.emschool_amount_datatable.addColumn("number", "Traditional");
      this.emschool_amount_datatable.addColumn("number", "All");
      _ref = ["2012", "2011", "2010"];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        year = _ref[_i];
        hrrow = [year];
        emrrow = [year];
        harow = [year];
        emarow = [year];
        _ref1 = ["charter", "online", "both", "neither", "everything"];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          level = _ref1[_j];
          hrrow.push(Math.round(this.data["mean_rank"]["H"][level][year] * 10) / 10);
          emrrow.push(Math.round(this.data["mean_rank"]["M"][level][year] * 10) / 10);
          harow.push(this.data["amount"]["H"][level][year]);
          emarow.push(this.data["amount"]["M"][level][year]);
        }
        this.highschool_ranks_datatable.addRows([hrrow]);
        this.emschool_ranks_datatable.addRows([emrrow]);
        this.highschool_amount_datatable.addRows([harow]);
        this.emschool_amount_datatable.addRows([emarow]);
      }
      this.highschool_ranks_table = new google.visualization.Table(highschool_meanranksdiv[0]);
      this.emschool_ranks_table = new google.visualization.Table(emschool_meanranksdiv[0]);
      this.highschool_amount_table = new google.visualization.Table(highschool_amountdiv[0]);
      this.emschool_amount_table = new google.visualization.Table(em_amountdiv[0]);
      options = {
        width: "100%"
      };
      this.highschool_ranks_table.draw(this.highschool_ranks_datatable, options);
      this.emschool_ranks_table.draw(this.emschool_ranks_datatable, options);
      this.highschool_amount_table.draw(this.highschool_amount_datatable, options);
      this.emschool_amount_table.draw(this.emschool_amount_datatable, options);
    }

    return OnlineCharterTablePanel;

  })();

  FRLRawScatterPanel = (function() {

    function FRLRawScatterPanel(data, panel) {
      var that;
      this.data = data;
      this.panel = panel;
      this.panel.empty();
      this.controlarea = $(document.createElement("div"));
      this.chartarea = $(document.createElement("div"));
      this.panel.append(this.controlarea).append(this.chartarea);
      that = this;
      this.controlarea.load("/static/chartview/frlrawscatterctrl.html?" + Math.random(), function() {
        that.switch_nav();
        return $(".nav-pills a", that.controlarea).click(function(e) {
          e.preventDefault();
          that.currentyear = $(this).text();
          return that.redraw();
        });
      });
      this.datatable = new google.visualization.DataTable();
      this.datatable.addColumn("number", "FRL");
      this.datatable.addColumn("number", "Grades");
      this.chart = new google.visualization.ScatterChart(this.chartarea[0]);
      this.currentyear = "2012";
      this.lastyear = null;
      this.redraw();
      this.resize_event_callback = _.bind(this.redraw, this);
      $(window).on("resize", this.resize_event_callback);
    }

    FRLRawScatterPanel.prototype.unhook_events = function() {
      return $(window).off("resize", this.resize_event_callback);
    };

    FRLRawScatterPanel.prototype.switch_nav = function() {
      var that;
      that = this;
      return $(".nav-pills a", this.controlarea).each(function(i, e) {
        $(e).parent().removeClass("active");
        if ($(e).text() === that.currentyear) {
          return $(e).parent().addClass("active");
        }
      });
    };

    FRLRawScatterPanel.prototype.redraw = function() {
      var d, gradecurveformatter, options, percentformatter, rows, _i, _len, _ref;
      if (this.currentyear !== this.lastyear) {
        rows = [];
        _ref = this.data["frl_to_grades"][this.currentyear];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          d = _ref[_i];
          rows.push([d[1], d[2]]);
        }
        this.datatable.removeRows(0, this.datatable.getNumberOfRows());
        this.datatable.addRows(rows);
        gradecurveformatter = new utils.GradeCurveFormatter();
        gradecurveformatter.format(this.datatable, 1);
        percentformatter = new utils.PercentFormatter();
        percentformatter.format(this.datatable, 0);
        this.lastyear = this.currentyear;
        this.switch_nav();
      }
      options = {
        title: "" + this.currentyear + " free/subsidised lunch percentage vs grades",
        width: parseInt(this.panel.css("width")),
        height: 400,
        chartArea: {
          width: "80%",
          height: "80%"
        },
        bar: {
          groupWidth: "100%"
        },
        titleTextStyle: {
          fontSize: 15
        },
        legend: {
          position: "none"
        },
        hAxis: {
          title: "Percent of the students of a school with free/subsidised lunch"
        },
        vAxis: {
          title: "School grade (higher is better)"
        }
      };
      return this.chart.draw(this.datatable, options);
    };

    return FRLRawScatterPanel;

  })();

  MostImprovedTablePanel = (function() {

    function MostImprovedTablePanel(data, panel) {
      var d, i, options, v, _i, _ref;
      this.data = data;
      this.panel = panel;
      this.panel.empty();
      this.datatable = new google.visualization.DataTable();
      this.datatable.addColumn("string", "School");
      this.datatable.addColumn("string", "District");
      this.datatable.addColumn("string", "City");
      this.datatable.addColumn("number", "2010 Enrollment");
      this.datatable.addColumn("number", "2012 Enrollment");
      this.datatable.addColumn("number", "2010 Rank");
      this.datatable.addColumn("number", "2012 Rank");
      this.datatable.addColumn("number", "Index");
      this.datatable.addRows((function() {
        var _i, _len, _ref, _results;
        _ref = this.data;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          d = _ref[_i];
          _results.push(d.slice(1, d.length));
        }
        return _results;
      }).call(this));
      for (i = _i = 0, _ref = this.datatable.getNumberOfRows() - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        v = this.datatable.getValue(i, 0);
        this.datatable.setFormattedValue(i, 0, "<a href=\"\" class=\"school-details\" data-id=\"" + this.data[i][0] + "\">" + v + "</a>");
      }
      options = {
        width: "100%",
        allowHtml: true,
        page: "enable"
      };
      this.table = new google.visualization.Table(this.panel[0]);
      this.table.draw(this.datatable, options);
      google.visualization.events.addListener(this.table, "page", _.bind(this.hook_school_details, this));
      google.visualization.events.addListener(this.table, "sort", _.bind(this.hook_school_details, this));
      this.details_view = new views.detailsview.DetailsView({
        app: this.app,
        tabularview: this
      });
      this.details_view.load_template();
      this.hook_school_details();
    }

    MostImprovedTablePanel.prototype.hook_school_details = function() {
      return $("a.school-details", this.panel).click(_.bind((function(e) {
        e.preventDefault();
        return this.details_view.show($(e.target).attr("data-id"), $("#details-view"));
      }), this));
    };

    MostImprovedTablePanel.prototype.unhook_events = function() {
      $("a.school-details").off("click");
      return google.visualization.events.removeAllListeners(this.table);
    };

    return MostImprovedTablePanel;

  })();

  ChartView = (function(_super) {

    __extends(ChartView, _super);

    function ChartView() {
      return ChartView.__super__.constructor.apply(this, arguments);
    }

    ChartView.prototype.tagName = "div";

    ChartView.prototype.template_name = "chartview.html";

    ChartView.prototype.render = function() {
      this.el.innerHTML = this.template();
      return this;
    };

    ChartView.prototype.loading = function(panel) {
      var loadingbar;
      panel.empty();
      loadingbar = $(document.createElement("div")).attr("id", "loading-bar");
      loadingbar.append($(document.createElement("img")).attr("src", "/static/img/ajax-loader.gif"));
      panel.append(loadingbar);
      return panel.show();
    };

    ChartView.prototype.loading_failed = function(panel, reason) {
      var loadingfailure;
      panel.empty();
      loadingfailure = $(document.createElement("h3")).addClass("text-center").text("Loading Failed " + reason);
      return panel.append(loadingfailure);
    };

    ChartView.prototype.add_row_span10 = function() {
      var row, span10, well;
      row = $(document.createElement("div")).addClass("row");
      span10 = $(document.createElement("div")).addClass("span10");
      well = $(document.createElement("div")).attr("class", "well chartpanel");
      span10.append(well);
      row.append(span10);
      $(".span10.content", this.el).append(row);
      return well;
    };

    ChartView.prototype.render_onlinecharter = function() {
      var first, fourth, response, second, third;
      this.render();
      first = $(".firstmiddle", this.el);
      second = $(".secondmiddle", this.el);
      third = $(".thirdmiddle", this.el);
      fourth = this.add_row_span10();
      this.loading(first);
      this.loading(second);
      this.loading(third);
      this.loading(fourth);
      first.load("/static/chartview/onlinecharter.html?" + Math.random());
      response = $.getJSON("/charts/online_charter");
      response.done(_.bind((function(data) {
        this.mean_ranks_panel = new MeanRanksPanel(data, second);
        this.ranks_histogram_panel = new RanksHistogramPanel(data, third);
        return this.ranks_table_panel = new OnlineCharterTablePanel(data, fourth);
      }), this));
      return response.fail(_.bind((function(xhr) {
        this.loading_failed(second, xhr.status);
        this.loading_failed(third, xhr.status);
        return this.loading_failed(fourth, xhr.status);
      }), this));
    };

    ChartView.prototype.render_frl = function() {
      var first, response, second;
      this.render();
      first = $(".firstmiddle", this.el);
      second = $(".secondmiddle", this.el);
      this.loading(first);
      this.loading(second);
      response = $.getJSON("/charts/frl");
      response.done(_.bind((function(data) {
        return this.frl_scatter_panel = new FRLRawScatterPanel(data, second);
      }), this));
      response.fail(_.bind((function(xhr) {
        return this.loading_failed(second, xhr.status);
      }), this));
      return first.load("/static/chartview/moneyvsgrades.html?" + Math.random());
    };

    ChartView.prototype.render_improved = function() {
      var first, response, second, that;
      this.render();
      first = $(".firstmiddle", this.el);
      second = $(".secondmiddle", this.el);
      this.loading(first);
      this.loading(second);
      first.load("/static/chartview/improved.html?" + Math.random());
      response = $.getJSON("/charts/improved");
      that = this;
      response.done(function(data) {
        return that.most_improved_table_panel = new MostImprovedTablePanel(data, second);
      });
      return response.fail(function(xhr) {
        return that.loading_failed(second, xhr.status);
      });
    };

    ChartView.prototype["switch"] = function(mode) {
      this["render_" + mode]();
      $(".nav.nav-list a", this.el).each(function(i, element) {
        $(element).parent().removeClass("active");
        if ($(element).attr("href").split("/")[1] === mode) {
          return $(element).parent().addClass("active");
        }
      });
      return this.unhook_panel_events();
    };

    ChartView.prototype.unhook_panel_events = function() {
      if (this.mean_ranks_panel) {
        this.mean_ranks_panel.unhook_events();
      }
      if (this.ranks_histogram_panel) {
        this.ranks_histogram_panel.unhook_events();
      }
      if (this.frl_scatter_panel) {
        this.frl_scatter_panel.unhook_events();
      }
      if (this.most_improved_table_panel) {
        return this.most_improved_table_panel.unhook_events();
      }
    };

    ChartView.prototype.on_view_changed = function() {
      this.undelegateEvents();
      return this.unhook_panel_events();
    };

    return ChartView;

  })(views.boringview.BoringView);

  exports["ChartView"] = ChartView;

}).call(this);


// Generated by CoffeeScript 1.4.0
(function() {
  var TabularView, exports,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  exports = namespace("views.tabularview");

  require("views.boringview");

  require("utils");

  TabularView = (function(_super) {

    __extends(TabularView, _super);

    function TabularView() {
      return TabularView.__super__.constructor.apply(this, arguments);
    }

    TabularView.prototype.tagName = "div";

    TabularView.prototype.template_name = "tabularview.html";

    TabularView.prototype.events = {
      "click a.year-switcher": "on_switch_clicked",
      "click a.level-switcher": "on_switch_clicked",
      "click a.open-details": "on_open_details_clicked"
    };

    TabularView.prototype.initialize = function() {
      TabularView.__super__.initialize.call(this);
      this.app = this.options.app;
      this.datacache = {};
      this.details_view = new views.detailsview.DetailsView({
        app: this.app,
        tabularview: this
      });
      return this.details_view.load_template();
    };

    TabularView.prototype.on_open_details_clicked = function(e) {
      e.preventDefault();
      return this.details_view.show($(e.target).attr("data-id"), $("#details-view", this.el));
    };

    TabularView.prototype["switch"] = function(mode) {
      var do_switching, request, that;
      do_switching = _.bind((function(data) {
        var countp, gradeformatter, html, i, percentformatter, row, v, _i, _ref;
        this.datatable.removeRows(0, this.datatable.getNumberOfRows());
        this.datatable.addRows((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = data.length; _i < _len; _i++) {
            row = data[_i];
            _results.push(row.slice(1, row.length));
          }
          return _results;
        })());
        for (i = _i = 0, _ref = this.datatable.getNumberOfRows() - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          v = this.datatable.getValue(i, 0);
          html = "<a href=\"#\" class=\"open-details\" data-id=\"" + data[i][0] + "\">" + v + "</a>";
          this.datatable.setFormattedValue(i, 0, html);
        }
        this.datatable.sort([
          {
            column: 7,
            desc: false
          }
        ]);
        percentformatter = new utils.PercentFormatter();
        percentformatter.format(this.datatable, 2);
        percentformatter.format(this.datatable, 3);
        percentformatter.format(this.datatable, 4);
        percentformatter.format(this.datatable, 5);
        percentformatter.format(this.datatable, 6);
        percentformatter.format(this.datatable, 14);
        percentformatter.format(this.datatable, 15);
        gradeformatter = new utils.GradeCurveFormatter();
        gradeformatter.format(this.datatable, 8);
        gradeformatter.format(this.datatable, 9);
        gradeformatter.format(this.datatable, 10);
        gradeformatter.format(this.datatable, 11);
        gradeformatter.format(this.datatable, 12);
        gradeformatter.format(this.datatable, 13);
        this.table.draw(this.datatable, {
          allowHtml: true,
          page: "enable",
          pageSize: 20
        });
        countp = $(document.createElement("p"));
        countp.addClass("pull-right");
        countp.text("Total Records: " + (this.datatable.getNumberOfRows()));
        $(".google-visualization-table-div-page").append(countp);
        this.app.navigate("tabular/" + mode, {
          trigger: false
        });
        $(".level-switcher", this.el).each(function(i, element) {
          $(element).parent().removeClass("active");
          if ($(element).attr("data-type") === mode[0]) {
            return $(element).parent().addClass("active");
          }
        });
        return $(".year-switcher", this.el).each(function(i, element) {
          $(element).parent().removeClass("active");
          if ($(element).text() === mode.slice(2, 6)) {
            return $(element).parent().addClass("active");
          }
        });
      }), this);
      if (this.datacache[mode]) {
        return do_switching(this.datacache[mode]);
      } else {
        that = this;
        statusmsg.display("Loading data...");
        request = $.getJSON("/tabular/" + mode);
        request.done(function(data) {
          that.datacache[mode] = data.data;
          do_switching(data.data);
          return statusmsg.close();
        });
        return request.fail(function(xhr) {
          statusmsg.close();
          return statusmsg.display("Error loading page: " + xhr.status, true);
        });
      }
    };

    TabularView.prototype.on_switch_clicked = function(e) {
      var current, mode;
      e.preventDefault();
      current = this.get_mode();
      if ($(e.target).attr("class") === "level-switcher") {
        mode = $(e.target).attr("data-type") + "/" + current.slice(2, 6);
      } else {
        mode = current[0] + "/" + $(e.target).text();
      }
      return this["switch"](mode);
    };

    TabularView.prototype.get_mode = function() {
      var mode;
      mode = "";
      $(".level-switcher", this.el).each(function(i, element) {
        if ($(element).parent().hasClass("active")) {
          mode += $(element).attr("data-type");
          return false;
        }
      });
      mode += "/";
      $(".year-switcher", this.el).each(function(i, element) {
        if ($(element).parent().hasClass("active")) {
          mode += $(element).text();
          return false;
        }
      });
      return mode;
    };

    TabularView.prototype.render = function() {
      var mode;
      this.el.innerHTML = this.template();
      mode = this.get_mode();
      if (!this.datatable) {
        this.datatable = new google.visualization.DataTable();
        this.datatable.addColumn("string", "School");
        this.datatable.addColumn("number", "Enrollment");
        this.datatable.addColumn("number", "Asian");
        this.datatable.addColumn("number", "Black");
        this.datatable.addColumn("number", "Latino");
        this.datatable.addColumn("number", "White");
        this.datatable.addColumn("number", "Other");
        this.datatable.addColumn("number", "Rank");
        this.datatable.addColumn("number", "Grade");
        this.datatable.addColumn("number", "Overall");
        this.datatable.addColumn("number", "Reading");
        this.datatable.addColumn("number", "Math");
        this.datatable.addColumn("number", "Writing");
        this.datatable.addColumn("number", "Science");
        this.datatable.addColumn("number", "F.S.L.");
        this.datatable.addColumn("number", "Grad Rate");
      }
      this.table = new google.visualization.Table(document.getElementById("tabular-data"));
      this.delegateEvents();
      return this;
    };

    TabularView.prototype.on_view_change = function() {
      return this.undelegateEvents();
    };

    return TabularView;

  })(views.boringview.BoringView);

  exports["TabularView"] = TabularView;

}).call(this);


// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  require("views.mapview");

  require("views.chartview");

  require("views.tabularview");

  require("views.htmlview");

  $(document).ready(function() {
    var App, app;
    statusmsg.setup();
    $.ajaxSetup({
      traditional: true
    });
    App = (function(_super) {

      __extends(App, _super);

      function App() {
        return App.__super__.constructor.apply(this, arguments);
      }

      App.prototype.routes = {
        "": "display_map",
        "map": "display_map",
        "map/:mode": "display_map",
        "map/details/:schoolid": "display_school_details_on_map",
        "tabular": "display_tabular",
        "tabular/:level/:year": "display_tabular",
        "p/:page": "display_page",
        "charts": "display_charts",
        "charts/:type": "display_charts",
        "charts/:type/:subtype": "display_charts"
      };

      App.prototype.initialize = function() {
        var k, nameslist, that, v;
        this.currentview = null;
        this.currentmode = null;
        this.mapview = new views.mapview.MapView({
          app: this
        });
        this.chartview = new views.chartview.ChartView({
          app: this
        });
        this.tabularview = new views.tabularview.TabularView({
          app: this
        });
        this.htmlview = new views.htmlview.HtmlView();
        that = this;
        nameslist = (function() {
          var _ref, _results;
          _ref = window["SCHOOL_NAMES"];
          _results = [];
          for (k in _ref) {
            v = _ref[k];
            _results.push(k);
          }
          return _results;
        })();
        return $(".search-query").typeahead({
          source: nameslist,
          updater: function(item) {
            if (that.currentview.search && window["SCHOOL_NAMES"][item]) {
              that.currentview.search(window["SCHOOL_NAMES"][item]);
            }
            return item;
          }
        });
      };

      App.prototype.switch_view = function(page, view, mode) {
        if (this.currentview && this.currentview.on_view_change) {
          this.currentview.on_view_change();
        }
        this.currentview = view;
        this.currentmode = mode;
        $(".navbar .nav li").each(function(i) {
          if ($(this).attr("data-name") === page) {
            return $(this).addClass("active");
          } else {
            if ($(this).hasClass("active")) {
              return $(this).removeClass("active");
            }
          }
        });
        if (this.currentview.search) {
          return $(".search-query").show();
        } else {
          return $(".search-query").hide();
        }
      };

      App.prototype.check_for_current_view = function(view, mode) {
        if (this.currentview !== null && this.currentview === view) {
          if (this.currentmode !== mode) {
            this.currentview["switch"](mode);
            this.currentmode = mode;
            return 1;
          }
          return true;
        }
        return false;
      };

      App.prototype.wait_for_template_load = function(view, on_template_load) {
        statusmsg.display("Loading page...");
        if (!view.template_request) {
          view.load_template();
        }
        view.template_request.done(function() {
          on_template_load();
          return statusmsg.close();
        });
        return view.template_request.fail(function(xhr) {
          statusmsg.close();
          return statusmsg.display("Error loading page (" + xhr.status + " " + xhr.statusText + ")", true);
        });
      };

      App.prototype.display_tabular = function(level, year) {
        var mode, render_tabularview;
        if (level == null) {
          level = "H";
        }
        if (year == null) {
          year = "2012";
        }
        mode = "" + level + "/" + year;
        if (this.check_for_current_view(this.tabularview, mode)) {
          return;
        }
        render_tabularview = _.bind((function() {
          $("#main").empty().append(this.tabularview.el);
          this.tabularview.render();
          this.tabularview["switch"](mode);
          return this.switch_view("tabular", this.tabularview, mode);
        }), this);
        return this.wait_for_template_load(this.tabularview, render_tabularview);
      };

      App.prototype.display_page = function(page) {
        var status;
        status = this.check_for_current_view(this.htmlview, page);
        if (status === 1) {
          this.switch_view(page, this.htmlview, page);
          return;
        } else if (status) {
          return;
        }
        this.htmlview["switch"](page);
        $("#main").empty().append(this.htmlview.el);
        return this.switch_view(page, this.htmlview, page);
      };

      App.prototype.display_map = function(mode) {
        var render_mapview;
        if (mode == null) {
          mode = "default";
        }
        if (this.check_for_current_view(this.mapview, mode)) {
          return;
        }
        render_mapview = _.bind((function() {
          this.mapview.render();
          this.mapview.initialize_map(mode);
          return this.switch_view("map", this.mapview, mode);
        }), this);
        return this.wait_for_template_load(this.mapview, render_mapview);
      };

      App.prototype.display_school_details_on_map = function(schoolid) {
        var render_mapview_and_details;
        if (this.check_for_current_view(this.mapview, this.mapview.currentmode || "enrollment-default")) {
          this.mapview.show_details(schoolid);
          return;
        }
        render_mapview_and_details = _.bind((function() {
          this.mapview.render();
          this.mapview.initialize_map("enrollment-default");
          this.switch_view("map", this.mapview, "enrollment-default");
          return this.mapview.show_details(schoolid);
        }), this);
        return this.wait_for_template_load(this.mapview, render_mapview_and_details);
      };

      App.prototype.display_charts = function(type, subtype) {
        var mode, render_chartview;
        if (type == null) {
          type = "onlinecharter";
        }
        if (subtype == null) {
          subtype = "";
        }
        if (subtype) {
          mode = "" + type + "/" + subtype;
        } else {
          mode = type;
        }
        if (this.check_for_current_view(this.chartview, mode)) {
          return;
        }
        render_chartview = _.bind((function() {
          this.chartview.render();
          this.chartview["switch"](type, subtype);
          $("#main").empty().append(this.chartview.el);
          return this.switch_view("charts", this.chartview, mode);
        }), this);
        return this.wait_for_template_load(this.chartview, render_chartview);
      };

      return App;

    })(Backbone.Router);
    app = new App();
    return Backbone.history.start();
  });

}).call(this);


// Generated by CoffeeScript 1.4.0
(function() {



}).call(this);


// Generated by CoffeeScript 1.4.0
(function() {
  var set_human_msg_css, statusmsg;

  statusmsg = namespace("statusmsg");

  set_human_msg_css = function(msgbox) {
    return msgbox.css("position", "fixed").css("left", ($(window).width() - $(msgbox).outerWidth()) / 2);
  };

  statusmsg["setup"] = function(appendTo, msgOpacity, msgID) {
    if (appendTo == null) {
      appendTo = "body";
    }
    if (msgOpacity == null) {
      msgOpacity = 0.8;
    }
    if (msgID == null) {
      msgID = "statusmsg";
    }
    statusmsg.msgID = msgID;
    statusmsg.msgOpacity = msgOpacity;
    statusmsg.msgbox = $('<div id="' + statusmsg.msgID + '" class="statusmsg"></div>');
    $(appendTo).append(statusmsg.msgbox);
    $(window).resize(function() {
      return set_human_msg_css(statusmsg.msgbox);
    });
    return $(window).resize();
  };

  statusmsg["display"] = function(msg, closable) {
    if (closable) {
      msg += "<a href=\"#\" class=\"close-statusmsg\">&times;</a>";
    }
    statusmsg.msgbox.html(msg);
    if (closable) {
      $(".close-statusmsg", statusmsg.msgbox).click(function(event) {
        event.preventDefault();
        return statusmsg.close();
      });
    }
    set_human_msg_css(statusmsg.msgbox);
    return statusmsg.msgbox.fadeIn();
  };

  statusmsg["close"] = function() {
    if (statusmsg.msgbox.css("display") !== "none") {
      return statusmsg.msgbox.fadeOut();
    }
  };

}).call(this);


